http://learningsparql.com/ns/data#item1	http://learningsparql.com/ns/demo#amount	14	
http://learningsparql.com/ns/data#item2	http://learningsparql.com/ns/demo#amount	10	
http://learningsparql.com/ns/data#item3	http://learningsparql.com/ns/demo#amount	30	

  { 
    Precode:
      0:   { 
          time      0.52% fanout         1 input         1 rows
          time       1.8% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...amount" ,  1 ,  1 )
            5: vector$29 := Call vector (vector$27)
            10: vector$31 := Call vector ()
            15: BReturn 0
          fork {
              time        12% fanout         3 input         1 rows
              RDF_QUAD         3 rows(t4.S$35, t4.O$34)
               inlined  P =  IRI_ID"...units" 
              time       5.2% fanout         1 input         3 rows
              RDF_QUAD         1 rows(t2.S$38)
               inlined  P =  IRI_ID"...product"  ,  S = t4.S$35
              time        79% fanout         0 input         3 rows
              Warning: the cardinality estimate of the cost model differs greatly from the measured time. Cardinality estimate:         1 Fanout:         0
              RDF_QUAD         1 rows(t3.O$41)
               inlined  P =  IRI_ID"...amount"  ,  S = k_t4.S$110
              
              After code:
              0: __ro2sq$43 := Call __ro2sq (t4.O$34)
              5: __ro2sq$45 := Call __ro2sq (t3.O$41)
              10: rdf_concat_impl$47 := Call rdf_concat_impl (<c http://learningsparql.com/ns/units#>, __ro2sq$43)
              15: __rdf_strsqlval$49 := Call __rdf_strsqlval (rdf_concat_impl$47,  2 )
              20: DB.DBA.rdf_strdt_impl$51 := Call DB.DBA.rdf_strdt_impl (__ro2sq$45, __rdf_strsqlval$49)
              27: vector$53 := Call vector (t2.S$38, DB.DBA.rdf_strdt_impl$51)
              32: if (user_aggr_notfirst$58  =  1 ) then 47 else 36 unkn 36
              36: user_aggr_notfirst$58  :=  := artm  1 
              40: user_aggr_ret$60 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$59 )
              47: user_aggr_ret$60 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$59 , vector$29, vector$53, vector$31,  1 )
              54: BReturn 0
            }
          time       1.7% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$55
          
          After code:
          0: callret-0$61 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$59 )
          7: BReturn 0
          time      0.26% fanout         0 input         1 rows
          Subquery Select(callret-0$61)
        }
      
      8:  <none>  := Call DB.DBA.RDF_DICT_OF_TRIPLES_TO_THREE_COLS (scalar$145 )
      15: BReturn 0
    END Node
  }


 1 msec 20% cpu,        13 rnd         2 seq   28.5714% same seg   28.5714% same pg 
Compilation: 2 msec 0 reads         0% read 0 messages         0% clw
