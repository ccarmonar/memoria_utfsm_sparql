  { 
    Precode:
      0:   { FOR UPDATE
          time      0.25% fanout         1 input         1 rows
          time       5.8% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ()
            5: DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$29 := Call DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (<c SPARQL Tutorial>)
            12: vector$31 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...1.1/title" ,  3 , DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$29)
            17: vector$33 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...price" ,  3 ,  42 )
            22: vector$35 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...discount" ,  3 ,  0.2 )
            27: DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$37 := Call DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (<c The Semantic Web>)
            34: vector$39 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...1.1/title" ,  3 , DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$37)
            39: vector$41 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...price" ,  3 ,  23 )
            44: vector$43 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...discount" ,  3 ,  0.25 )
            49: vector$45 := Call vector (vector$31, vector$33, vector$35, vector$39, vector$41, vector$43)
            54: BReturn 0
          fork {
              Subquery 47 
                { 
                  Subquery 50 
                    { 
                      time      0.21% fanout         1 input         1 rows
                      Precode:
                        0: __stub$51 :=  := artm  1 
                        4: BReturn 0
                      END Node
                      time      0.11% fanout         0 input         1 rows
                      Subquery Select(__stub$51)
                    }
                  time      0.14% fanout         1 input         1 rows
                  skip node  1  <none> set_no$49
                  time     0.027% fanout         0 input         1 rows
                  Subquery Select( <none> )
                }
              
              After code:
              0: if (user_aggr_notfirst$74  =  1 ) then 15 else 4 unkn 4
              4: user_aggr_notfirst$74  :=  := artm  1 
              8: user_aggr_ret$76 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$75 )
              15: user_aggr_ret$76 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$75 , vector$27, vector$27, vector$45,  0 )
              22: BReturn 0
            }
          time        93% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$71
          
          After code:
          0: DB.DBA.SPARQL_CONSTRUCT_FIN$77 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$75 )
          7: callret-0$79 := Call DB.DBA.SPARQL_INSERT_DICT_CONTENT (<tag 182 flag 1 c urn:sparql:bind:tests>, DB.DBA.SPARQL_CONSTRUCT_FIN$77,  0 , <DB_NULL>,  0 )
          14: BReturn 0
          time       0.1% fanout         0 input         1 rows
          Subquery Select(callret-0$79)
        }
      
      8: vector$168  := Call vector (scalar$169 )
      13: DB.DBA.SPARUL_RUN$167  := Call DB.DBA.SPARUL_RUN (vector$168 )
      20:  <none>  := Call set_row_count (DB.DBA.SPARUL_RUN$167 )
      25: BReturn 0
    END Node
  }


 1 msec 17% cpu,        13 rnd         0 seq         0% same seg         0% same pg 
Compilation: 2 msec 0 reads         0% read 0 messages         0% clw
