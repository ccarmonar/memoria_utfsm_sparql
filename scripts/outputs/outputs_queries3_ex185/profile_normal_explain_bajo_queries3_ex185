http://learningsparql.com/ns/addressbook#craig	http://learningsparql.com/ns/addressbook#email	craigellis@yahoo.com	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#areaCode	229	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#homeTel	(229) 276-5135	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#nick	Dick	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#lastName	Mutt	
http://learningsparql.com/ns/addressbook#richard	http://learningsparql.com/ns/addressbook#homeTel	(229) 276-5135	
http://learningsparql.com/ns/data#i9771	http://learningsparql.com/ns/addressbook#homeTel	(245) 646-5488	
http://learningsparql.com/ns/data#i9771	http://learningsparql.com/ns/addressbook#takingCourse	http://learningsparql.com/ns/data#course59	
http://learningsparql.com/ns/addressbook#cindy	http://learningsparql.com/ns/addressbook#email	cindym@gmail.com	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#lastName	Mutt	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#firstName	Richard	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#address	nodeID://b10003	
http://learningsparql.com/ns/addressbook#craig	http://learningsparql.com/ns/addressbook#homeTel	(194) 966-1505	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#takingCourse	http://learningsparql.com/ns/data#course59	
http://learningsparql.com/ns/data#i0432	http://learningsparql.com/ns/addressbook#takingCourse	http://learningsparql.com/ns/data#course85	
http://learningsparql.com/ns/addressbook#cindy	http://learningsparql.com/ns/addressbook#areaCode	245	
http://learningsparql.com/ns/data#i9771	http://learningsparql.com/ns/addressbook#takingCourse	http://learningsparql.com/ns/data#course34	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#firstName	Richard	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#postalCode	49345	
http://learningsparql.com/ns/addressbook#i0432	http://learningsparql.com/ns/addressbook#address	nodeID://b10013	

  { 
    Precode:
      0:   { 
          time      0.18% fanout         1 input         1 rows
          time      0.69% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ( 1 ,  0 ,  1 ,  2 ,  1 ,  3 )
            5: vector$29 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...areaCode" ,  1 ,  1 )
            10: vector$31 := Call vector (vector$27, vector$29)
            15: vector$33 := Call vector ()
            20: BReturn 0
          fork {
              time       4.1% fanout         6 input         1 rows
              RDF_QUAD         6 rows(t2.S$37, t2.O$36)
               inlined  P =  IRI_ID"...homeTel" 
              time        11% fanout         5 input         6 rows
              Precode:
                0: __ro2lo$39 := Call __ro2lo (t2.O$36)
                5: rdf_substr_impl$41 := Call rdf_substr_impl (__ro2lo$39,  2 ,  3 )
                10: DB.DBA.RDF_LONG_OF_SQLVAL$43 := Call DB.DBA.RDF_LONG_OF_SQLVAL (rdf_substr_impl$41)
                17: BReturn 0
              RDF_QUAD_SP       8.5 rows(t3.P$46)
               inlined  S = t2.S$37
              time        84% fanout         0 input        30 rows
              Warning: the cardinality estimate of the cost model differs greatly from the measured time. Cardinality estimate:       1.2 Fanout:         0
              RDF_QUAD       1.2 rows(t3.O$50)
               inlined  P = t3.P$46 ,  S = k_t2.S$112
              
              After code:
              0: __ro2lo$53 := Call __ro2lo (t3.O$50)
              5: vector$55 := Call vector (t2.S$37, DB.DBA.RDF_LONG_OF_SQLVAL$43, t3.P$46, __ro2lo$53)
              10: if (user_aggr_notfirst$60  =  1 ) then 25 else 14 unkn 14
              14: user_aggr_notfirst$60  :=  := artm  1 
              18: user_aggr_ret$62 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$61 )
              25: user_aggr_ret$62 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$61 , vector$31, vector$55, vector$33,  1 )
              32: BReturn 0
            }
          time      0.63% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$57
          
          After code:
          0: callret-0$63 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$61 )
          7: BReturn 0
          time     0.089% fanout         0 input         1 rows
          Subquery Select(callret-0$63)
        }
      
      8:  <none>  := Call DB.DBA.RDF_DICT_OF_TRIPLES_TO_THREE_COLS (scalar$147 )
      15: BReturn 0
    END Node
  }


 2 msec 46% cpu,        70 rnd        34 seq   46.4789% same seg   30.9859% same pg 
Compilation: 2 msec 0 reads         0% read 0 messages         0% clw
