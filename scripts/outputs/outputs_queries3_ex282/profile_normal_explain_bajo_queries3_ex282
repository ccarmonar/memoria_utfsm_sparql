http://learningsparql.com/ns/terms#t3	http://www.w3.org/2000/01/rdf-schema#type	http://www.w3.org/2004/02/skos/core#Concept	
http://learningsparql.com/ns/terms#t1	http://www.w3.org/2004/02/skos/core#prefLabel	truck	
http://learningsparql.com/ns/terms#t2	http://www.w3.org/2000/01/rdf-schema#type	http://www.w3.org/2004/02/skos/core#Concept	
http://learningsparql.com/ns/terms#t2	http://www.w3.org/2004/02/skos/core#prefLabel	flat	
http://learningsparql.com/ns/terms#t3	http://www.w3.org/2004/02/skos/core#prefLabel	elevator	
http://learningsparql.com/ns/terms#t1	http://www.w3.org/2000/01/rdf-schema#type	http://www.w3.org/2004/02/skos/core#Concept	
http://learningsparql.com/ns/terms#t1	http://www.w3.org/2004/02/skos/core#prefLabel	lorry	
http://learningsparql.com/ns/terms#t2	http://www.w3.org/2004/02/skos/core#prefLabel	apartment	
http://learningsparql.com/ns/terms#t3	http://www.w3.org/2004/02/skos/core#prefLabel	lift	

  { 
    Precode:
      0:   { 
          time      0.31% fanout         1 input         1 rows
          time       1.7% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...type" ,  3 ,  IRI_ID"...Concept" )
            5: vector$29 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...prefLabel" ,  1 ,  2 )
            10: vector$31 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...prefLabel" ,  1 ,  1 )
            15: vector$33 := Call vector (vector$27, vector$29, vector$31)
            20: vector$35 := Call vector ()
            25: BReturn 0
          fork {
              time       7.6% fanout         6 input         1 rows
              RDF_QUAD         6 rows(t13.S$39, t13.O$38)
               inlined  P =  IRI_ID"...row" 
              time       4.6% fanout       0.5 input         6 rows
              RDF_QUAD         1 rows(t14.S$42)
               inlined  P =  IRI_ID"...column"  ,  S = t13.S$39 ,  O =  2 
              time       8.1% fanout         2 input         3 rows
              Precode:
                0: __rdf_strsqlval$44 := Call __rdf_strsqlval (t13.O$38,  0 )
                5: rdf_concat_impl$46 := Call rdf_concat_impl (<c http://learningsparql.com/ns/terms#t>, __rdf_strsqlval$44)
                10: __i2idn$48 := Call __i2idn (rdf_concat_impl$46)
                15: BReturn 0
              RDF_QUAD_POGS         4 rows(t10.S$51)
               P =  IRI_ID"...row"  ,  O = k_t13.O$127
              time       2.8% fanout       0.5 input         6 rows
              RDF_QUAD         1 rows(t11.S$54)
               inlined  P =  IRI_ID"...column"  ,  S = t10.S$51 ,  O =  1 
              time       4.7% fanout         1 input         3 rows
              RDF_QUAD       7.5 rows(t15.O$57)
               inlined  P =  IRI_ID"...label"  ,  S = k_t13.S$151
              time        69% fanout         0 input         3 rows
              Warning: the cardinality estimate of the cost model differs greatly from the measured time. Cardinality estimate:       7.5 Fanout:         0
              Precode:
                0: __ro2sq$59 := Call __ro2sq (t15.O$57)
                5: DB.DBA.rdf_strlang_impl$61 := Call DB.DBA.rdf_strlang_impl (__ro2sq$59, <c en-GB>)
                12: BReturn 0
              RDF_QUAD       7.5 rows(t12.O$64)
               inlined  P =  IRI_ID"...label"  ,  S = k_t10.S$165
              
              After code:
              0: __ro2sq$66 := Call __ro2sq (t12.O$64)
              5: DB.DBA.rdf_strlang_impl$68 := Call DB.DBA.rdf_strlang_impl (__ro2sq$66, <c en-US>)
              12: vector$70 := Call vector (__i2idn$48, DB.DBA.rdf_strlang_impl$61, DB.DBA.rdf_strlang_impl$68)
              17: if (user_aggr_notfirst$75  =  1 ) then 32 else 21 unkn 21
              21: user_aggr_notfirst$75  :=  := artm  1 
              25: user_aggr_ret$77 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$76 )
              32: user_aggr_ret$77 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$76 , vector$33, vector$70, vector$35,  1 )
              39: BReturn 0
            }
          time       1.2% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$72
          
          After code:
          0: callret-0$78 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$76 )
          7: BReturn 0
          time      0.17% fanout         0 input         1 rows
          Subquery Select(callret-0$78)
        }
      
      8:  <none>  := Call DB.DBA.RDF_DICT_OF_TRIPLES_TO_THREE_COLS (scalar$200 )
      15: BReturn 0
    END Node
  }


 1 msec 14% cpu,        28 rnd         8 seq   55.1724% same seg   13.7931% same pg 
Compilation: 6 msec 0 reads         0% read 0 messages         0% clw
