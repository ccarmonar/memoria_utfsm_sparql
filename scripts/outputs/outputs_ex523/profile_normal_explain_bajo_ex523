http://learningsparql.com/ns/data#mike	http://learningsparql.com/ns/addressbook#hasAunt	http://learningsparql.com/ns/data#gene	
http://learningsparql.com/ns/data#jane	http://learningsparql.com/ns/addressbook#hasAunt	http://learningsparql.com/ns/data#joan	

  { 
    Precode:
      0:   { 
          time       1.1% fanout         1 input         1 rows
          time       3.3% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...hasAunt" ,  1 ,  1 )
            5: vector$29 := Call vector (vector$27)
            10: vector$31 := Call vector ()
            15: BReturn 0
          fork {
              time        22% fanout         2 input         1 rows
              RDF_QUAD_POGS         2 rows(s_17_11_t4.S$34)
               P =  IRI_ID"...gender"  ,  O =  IRI_ID"...female" 
              time        14% fanout         1 input         2 rows
              RDF_QUAD         1 rows(s_17_11_t3.O$38, s_17_11_t3.S$37)
               inlined  P =  IRI_ID"...hasParent"  ,  S = s_17_11_t4.S$34
              time       8.7% fanout         2 input         2 rows
              RDF_QUAD_POGS       1.3 rows(s_17_11_t2.S$41)
               P =  IRI_ID"...hasParent"  ,  O = cast$104
              time       8.2% fanout         1 input         4 rows
              RDF_QUAD_POGS       1.3 rows(s_17_11_t1.O$45, s_17_11_t1.S$44)
               P =  IRI_ID"...hasParent"  ,  O = cast$118
              time        40% fanout         0 input         4 rows
              END Node
              After test:
              0: if (s_17_11_t1.O$45 = s_17_11_t3.S$37) then 5 else 4 unkn 5
              4: BReturn 1
              5: BReturn 0
              
              After code:
              0: vector$47 := Call vector (s_17_11_t1.S$44, s_17_11_t3.S$37)
              5: if (user_aggr_notfirst$52  =  1 ) then 20 else 9 unkn 9
              9: user_aggr_notfirst$52  :=  := artm  1 
              13: user_aggr_ret$54 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$53 )
              20: user_aggr_ret$54 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$53 , vector$29, vector$47, vector$31,  1 )
              27: BReturn 0
            }
          time       3.4% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$49
          
          After code:
          0: callret-0$55 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$53 )
          7: BReturn 0
          time      0.49% fanout         0 input         1 rows
          Subquery Select(callret-0$55)
        }
      
      8:  <none>  := Call DB.DBA.RDF_DICT_OF_TRIPLES_TO_THREE_COLS (scalar$167 )
      15: BReturn 0
    END Node
  }


 0 msec 14% cpu,         9 rnd         3 seq        50% same seg         0% same pg 
Compilation: 2 msec 0 reads         0% read 0 messages         0% clw
