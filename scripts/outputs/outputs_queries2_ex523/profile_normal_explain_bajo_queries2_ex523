http://learningsparql.com/ns/data#mike	http://learningsparql.com/ns/addressbook#hasAunt	http://learningsparql.com/ns/data#gene	
http://learningsparql.com/ns/data#jane	http://learningsparql.com/ns/addressbook#hasAunt	http://learningsparql.com/ns/data#joan	

  { 
    Precode:
      0:   { 
          time         1% fanout         1 input         1 rows
          time       3.3% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ( 1 ,  0 ,  3 ,  IRI_ID"...hasAunt" ,  1 ,  1 )
            5: vector$29 := Call vector (vector$27)
            10: vector$31 := Call vector ()
            15: BReturn 0
          fork {
              time        21% fanout         4 input         1 rows
              RDF_QUAD         4 rows(s_17_11_t1.O$35, s_17_11_t1.S$34)
               inlined  P =  IRI_ID"...hasParent" 
              time        12% fanout       0.5 input         4 rows
              RDF_QUAD         1 rows(s_17_11_t2.O$38)
               inlined  P =  IRI_ID"...hasParent"  ,  S = k_s_17_11_t1.O$92
              time        13% fanout         2 input         2 rows
              RDF_QUAD_POGS       2.7 rows(s_17_11_t3.S$41)
               P =  IRI_ID"...hasParent"  ,  O = cast$106
              time       2.5% fanout       0.5 input         4 rows
              END Node
              After test:
              0: if (s_17_11_t1.O$35 = s_17_11_t3.S$41) then 5 else 4 unkn 5
              4: BReturn 1
              5: BReturn 0
              time        43% fanout         0 input         2 rows
              Warning: the cardinality estimate of the cost model differs greatly from the measured time. Cardinality estimate:       1.3 Fanout:         0
              Precode:
                0: vector$43 := Call vector (s_17_11_t1.S$34, s_17_11_t3.S$41)
                5: BReturn 0
              RDF_QUAD       1.3 rows()
               inlined  P =  IRI_ID"...gender"  ,  S = k_s_17_11_t3.S$133 ,  O =  IRI_ID"...female" 
              
              After code:
              0: if (user_aggr_notfirst$50  =  1 ) then 15 else 4 unkn 4
              4: user_aggr_notfirst$50  :=  := artm  1 
              8: user_aggr_ret$52 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$51 )
              15: user_aggr_ret$52 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$51 , vector$29, vector$43, vector$31,  1 )
              22: BReturn 0
            }
          time       3.7% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$47
          
          After code:
          0: callret-0$53 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$51 )
          7: BReturn 0
          time      0.45% fanout         0 input         1 rows
          Subquery Select(callret-0$53)
        }
      
      8:  <none>  := Call DB.DBA.RDF_DICT_OF_TRIPLES_TO_THREE_COLS (scalar$167 )
      15: BReturn 0
    END Node
  }


 0 msec 14% cpu,         9 rnd         5 seq        50% same seg         0% same pg 
Compilation: 2 msec 0 reads         0% read 0 messages         0% clw
