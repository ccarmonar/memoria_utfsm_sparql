OpenLink Virtuoso Interactive SQL (Virtuoso)
Version 07.20.3232 as of May 11 2021
Type HELP; for help and EXIT; to exit.
Connected to OpenLink Virtuoso
Driver: 07.20.3232 OpenLink Virtuoso ODBC Driver
SPARQL_TO_SQL_TEXT
LONG VARCHAR
_______________________________________________________________________________

set_row_count ( DB.DBA.SPARUL_RUN ( vector (
       (SELECT TOP 1  DB.DBA.SPARQL_INSERT_DICT_CONTENT (
     __bft( 'urn:sparql:bind:tests' , 1),
      DB.DBA.SPARQL_CONSTRUCT (
        vector (),
        vector (),
        vector (
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book1' ),
           3,
           __i2id ( UNAME'http://purl.org/dc/elements/1.1/title' ),
           3,
           DB.DBA.RDF_MAKE_LONG_OF_SQLVAL ( 'SPARQL Tutorial' )),
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book1' ),
           3,
           __i2id ( UNAME'http://example.org/ns#price' ),
           3,
           42),
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book1' ),
           3,
           __i2id ( UNAME'http://example.org/ns#discount' ),
           3,
           0.2),
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book2' ),
           3,
           __i2id ( UNAME'http://purl.org/dc/elements/1.1/title' ),
           3,
           DB.DBA.RDF_MAKE_LONG_OF_SQLVAL ( 'The Semantic Web' )),
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book2' ),
           3,
           __i2id ( UNAME'http://example.org/ns#price' ),
           3,
           23),
          vector (
           3,
           __i2id ( UNAME'http://example.org/book/book2' ),
           3,
           __i2id ( UNAME'http://example.org/ns#discount' ),
           3,
           0.25)),
       0),
     0,
     NULL,
     0) AS "callret-0"
FROM (SELECT TOP 1 1 AS __dummy_retval
  FROM
    (SELECT 1 as __stub) AS "stub-s_15_7"
  ) as "limofs"
OPTION (QUIETCAST))))
   )

1 Rows. -- 1 msec.

Done. -- 0 msec.

Done. -- 1 msec.

Done. -- 0 msec.
result
LONG VARCHAR
_______________________________________________________________________________

  { 
    Precode:
      0:   { FOR UPDATE
          time      0.42% fanout         1 input         1 rows
          time       7.4% fanout         1 input         1 rows
          Precode:
            0: vector$27 := Call vector ()
            5: DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$29 := Call DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (<c SPARQL Tutorial>)
            12: vector$31 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...1.1/title" ,  3 , DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$29)
            17: vector$33 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...price" ,  3 ,  42 )
            22: vector$35 := Call vector ( 3 ,  IRI_ID"...book1" ,  3 ,  IRI_ID"...discount" ,  3 ,  0.2 )
            27: DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$37 := Call DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (<c The Semantic Web>)
            34: vector$39 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...1.1/title" ,  3 , DB.DBA.RDF_MAKE_LONG_OF_SQLVAL$37)
            39: vector$41 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...price" ,  3 ,  23 )
            44: vector$43 := Call vector ( 3 ,  IRI_ID"...book2" ,  3 ,  IRI_ID"...discount" ,  3 ,  0.25 )
            49: vector$45 := Call vector (vector$31, vector$33, vector$35, vector$39, vector$41, vector$43)
            54: BReturn 0
          fork {
              Subquery 47 
                { 
                  Subquery 50 
                    { 
                      time      0.51% fanout         1 input         1 rows
                      Precode:
                        0: __stub$51 :=  := artm  1 
                        4: BReturn 0
                      END Node
                      time      0.24% fanout         0 input         1 rows
                      Subquery Select(__stub$51)
                    }
                  time      0.24% fanout         1 input         1 rows
                  skip node  1  <none> set_no$49
                  time     0.052% fanout         0 input         1 rows
                  Subquery Select( <none> )
                }
              
              After code:
              0: if (user_aggr_notfirst$74  =  1 ) then 15 else 4 unkn 4
              4: user_aggr_notfirst$74  :=  := artm  1 
              8: user_aggr_ret$76 := Call DB.DBA.SPARQL_CONSTRUCT_INIT (user_aggr_env$75 )
              15: user_aggr_ret$76 := Call DB.DBA.SPARQL_CONSTRUCT_ACC (user_aggr_env$75 , vector$27, vector$27, vector$45,  0 )
              22: BReturn 0
            }
          time        91% fanout         1 input         1 rows
          skip node  1  <none> set_ctr$71
          
          After code:
          0: DB.DBA.SPARQL_CONSTRUCT_FIN$77 := Call DB.DBA.SPARQL_CONSTRUCT_FIN (user_aggr_env$75 )
          7: callret-0$79 := Call DB.DBA.SPARQL_INSERT_DICT_CONTENT (<tag 182 flag 1 c urn:sparql:bind:tests>, DB.DBA.SPARQL_CONSTRUCT_FIN$77,  0 , <DB_NULL>,  0 )
          14: BReturn 0
          time      0.15% fanout         0 input         1 rows
          Subquery Select(callret-0$79)
        }
      
      8: vector$168  := Call vector (scalar$169 )
      13: DB.DBA.SPARUL_RUN$167  := Call DB.DBA.SPARUL_RUN (vector$168 )
      20:  <none>  := Call set_row_count (DB.DBA.SPARUL_RUN$167 )
      25: BReturn 0
    END Node
  }


 0 msec 19% cpu,         6 rnd         0 seq         0% same seg         0% same pg 
Compilation: 1 msec 0 reads         0% read 0 messages         0% clw

3 Rows. -- 7 msec.
